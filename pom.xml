<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.latico.example.springboot</groupId>
    <artifactId>latico-example-springboot</artifactId>
    <version>1.0</version>
    <modules>
        <module>swagger</module>
        <module>mybatis-druid</module>
        <module>starter-jar</module>
        <module>starter-war</module>
        <module>starter-origin</module>
        <module>eureka-client</module>
        <module>invoker-resttemplate</module>
        <module>provider</module>
        <module>invoker-resttemplate-eureka-ribbon</module>
        <module>provider-eureka</module>
        <module>invoker-feign</module>
        <module>invoker-feign-eureka</module>
        <module>logback</module>
        <module>log4j2-war</module>
        <module>provider-interceptor</module>
        <module>aspectj</module>
        <module>provider-transactional</module>
        <module>mybatis-pagehelper</module>
        <module>hibernate-druid</module>
        <module>jpa-hibernate-druid</module>
        <module>jpa-hibernate-druid-multi-ds</module>
        <module>quartz</module>
        <module>springjpa-mybatis-druid-multi-ds-mix</module>
        <module>springbatch</module>
        <module>springbatch-quartz</module>
        <module>redis</module>
        <module>postgresql</module>
        <module>cephfs</module>
        <module>hbase</module>
        <module>ehcache3</module>
        <module>ehcache2</module>
    </modules>
    <packaging>pom</packaging>

    <name>latico-example-springboot</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <!-- 版本和变量统一管理 -->
    <properties>
        <!-- JDK版本配置 -->
        <java.version>1.8</java.version>
        <!-- JDK版本配置 -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- 项目编码配置 -->
        <project.encoding>UTF-8</project.encoding>
        <!-- 文件拷贝时的编码 -->
        <project.build.sourceEncoding>${project.encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${project.encoding}</project.reporting.outputEncoding>
        <!-- 编译时的编码 -->
        <maven.compiler.encoding>${project.encoding}</maven.compiler.encoding>

        <!--跳过单元测试-->
        <skipTests>true</skipTests>
        <!--取消webxml的依赖，非必须的-->
        <failOnMissingWebXml>false</failOnMissingWebXml>

        <!--解决控制台乱码问题-->
        <argLine>-Dfile.encoding=UTF-8</argLine>

        <!-- build的时候设置的时间格式, 可用于生成文件名等 -->
        <maven.build.timestamp.format>yyyyMMdd</maven.build.timestamp.format>

        <!-- logback版本配置 -->
        <slf4j.version>1.7.25</slf4j.version>
        <logback.version>1.2.3</logback.version>
        <janino.version>3.0.11</janino.version>
        <springcloud.version>Hoxton.RELEASE</springcloud.version>
        <springboot.version>2.2.1.RELEASE</springboot.version>

        <!--旧版本的springboot和springcloud组合，因为新版的JPA对bean对象格式规范检测很严格，程序启动会报错提示修改字段为规范-->
        <!--<springcloud.version>Finchley.RELEASE</springcloud.version>
        <springboot.version>2.1.4.RELEASE</springboot.version>-->

        <swagger.version>2.8.0</swagger.version>
        <feign.version>10.2.0</feign.version>
    </properties>

    <!-- 打包配置 -->
    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <excludes>
                    <exclude>
                        **/*.java
                    </exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
        <plugins>
            <!-- 打源码包 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Compile -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <encoding>${project.encoding}</encoding>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>
                    <encoding>${project.encoding}</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>

        <!-- 专用插件统一管理 -->
        <pluginManagement>
            <plugins>

            </plugins>
        </pluginManagement>

    </build>

    <!-- 共用依赖 -->
    <dependencies>

        <!-- 单元测试开始-->
        <!--统一测试包-->
       <!-- <dependency>
            <groupId>com.latico.commons</groupId>
            <artifactId>latico-commons-test</artifactId>
            <version>1.0.0</version>
            <scope>test</scope>
        </dependency>-->

        <!-- 单元测试结束-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.6</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>com.latico.commons</groupId>
            <artifactId>latico-commons-common</artifactId>
            <version>1.0.0</version>
        </dependency>
        <!-- thymeleaf模版 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--servlet容器使用-->
        <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>

        <!-- 热部署，当文件重新编译的时候会自动加载 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>provided</scope>
        </dependency>
        <!--swagger restful接口自动可视化界面工具-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.version}</version>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <!--swagger restful接口自动可视化界面工具-->
    </dependencies>

    <!-- 专用依赖统一管理 -->
    <dependencyManagement>
        <dependencies>
            <!--注意：根据同一个pom文件，依赖的优先级是根据依赖的顺序决定，因为要以springboot为主，
            而且依赖的打包插件等都是要以springboot优先，如果以springcloud在前，
            那么spring-boot-maven-plugin打包插件不会打包成springboot的启动方式-->
            <!--管理导入springboot的父pom-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${springboot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--springcloud父依赖管理-->
            <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${springcloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>
</project>
